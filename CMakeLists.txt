cmake_minimum_required(VERSION 3.5.1)
project (mergesort)

add_library(mergesortlib ./src/MergeSort.cpp)
add_executable(mergesort ./src/MergeSortMain.cpp)

# what does this mean???
target_link_libraries(mergesort mergesortlib)

# Download and unpack googletest at configure time
configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
if(result)
  message(FATAL_ERROR "CMake step for googletest failed: ${result}")
endif()
execute_process(COMMAND ${CMAKE_COMMAND} --build .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
if(result)
  message(FATAL_ERROR "Build step for googletest failed: ${result}")
endif()

# Prevent overriding the parent project's compiler/linker
# settings on Windows
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This defines
# the gtest and gtest_main targets.
add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
                 ${CMAKE_BINARY_DIR}/googletest-build)

# The gtest/gtest_main targets carry header search path
# dependencies automatically when using CMake 2.8.11 or
# later. Otherwise we have to add them here ourselves.
if (CMAKE_VERSION VERSION_LESS 2.8.11)
  include_directories("${gtest_SOURCE_DIR}/include")
endif()

if (test)
  enable_testing()

  add_executable(mergesort_test ./test/MergeSort_test.cpp)
  target_link_libraries(mergesort_test gtest_main)
  target_link_libraries(mergesort_test mergesortlib)
  add_test(ZeroInput COMMAND mergesort_test)
  add_test(BackwardsInput COMMAND mergesort_test)
  add_test(SameInput COMMAND mergesort_test)
endif()
